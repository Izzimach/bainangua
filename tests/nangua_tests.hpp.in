#include "bainangua.hpp"

#include <boost/hana/map.hpp>
#include <boost/hana/string.hpp>
#include <boost/hana/pair.hpp>
#include <boost/hana/at_key.hpp>
#include <expected.hpp>

import VulkanContext;


#cmakedefine ASSETS_DIR "@ASSETS_DIR@"

#define SHADER_DIR ASSETS_DIR "/shaders"
#define TEXTURES_DIR ASSETS_DIR "/textures"


template <typename Result>
inline auto wrapRenderLoop(std::string_view name, std::function<typename Result(bainangua::VulkanContext&)> renderLoop) -> typename Result {
	return bainangua::createVulkanContext(
		bainangua::VulkanContextConfig{
			.AppName = std::string(name),
			.requiredExtensions = {
					VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME,
					VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME,
					VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME
			},
			.useValidation = false,
		},
		renderLoop
	);
}

template <typename RowFunction>
auto wrapRenderLoopRow(std::string_view name, RowFunction f) -> typename RowFunction::return_type {
	return wrapRenderLoop<RowFunction::return_type>(
		name,
		[&](bainangua::VulkanContext& s) -> typename RowFunction::return_type {
			auto r = boost::hana::make_map(
				boost::hana::make_pair(BOOST_HANA_STRING("context"), s),
				boost::hana::make_pair(BOOST_HANA_STRING("device"), s.vkDevice)
			);
			return f.applyRow(r);
		}
	);
}

